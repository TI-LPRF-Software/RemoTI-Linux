// Don't forget that in order to access Witbe Artifactory you need to setup
// your default user/password in your ~/.gradle/gradle.properties file
// you can also have a copy of the gradle.properties file in the current directory.

// Build Scripts Plugin Repositories & Dependencies
buildscript {
    repositories {
        maven {
            url "${artifactory_contextUrl}plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath group: 'net.witbe.qoe', name: 'witbe-builder', version: '0.0.2'
    }
}

// Load/Apply Plugins
apply plugin: 'maven-publish'
apply plugin: 'net.witbe.qoe.witbe-builder'

// Project Settings / Configuration.
project.group = "net.witbe.qoe.rf4ce"
project.ext.environment = [
PATH:         "${System.getenv('PATH')}:${witbeBuilder.nativeDependenciesPath}/bin",
CPATH:        "${witbeBuilder.nativeDependenciesPath}/include",
LIBRARY_PATH: "${witbeBuilder.nativeDependenciesPath}/lib",
DESTDIR:      witbeBuilder.destPath
]

dependencies {}

    // Mandatory Tasks
    task prepare {
        dependsOn 'extractDependencies'
    }

    task clean(dependsOn: ['cleanDependencies', 'cleanInstall']) {
        // cmake clean
    }

    task configure(type: Exec, dependsOn: prepare) {
        environment project.environment
        workingDir buildDir
        executable 'cmake'
        args "..", "-DCMAKE_BUILD_TYPE=RELEASE", "-DVERSION=${version}",
        "-DCMAKE_INSTALL_PREFIX=${witbeBuilder.installPrefix}",
        "-DWITBE_NATIVE_DEPENDENCIES_PATH=${witbeBuilder.nativeDependenciesPath}",
        "-DWITBE_CMAKE_DEPENDENCIES_PATH=${witbeBuilder.cmakeDependenciesPath}"
    }

    task build(type: Exec, dependsOn: configure) {
        environment project.environment
        workingDir buildDir
        executable 'make'
        args
    }

    task install(type: Exec, dependsOn: [build, 'cleanInstall']) {
        environment project.environment
        workingDir buildDir
        executable 'make'
        args 'install', "-j${nbCore}"
    }

    task test(dependsOn: install) {
    }

    task packages(type: Exec, dependsOn: test) {
        environment project.environment
        workingDir buildDir
        executable 'make'
        args 'package'
    }

    task artifacts(dependsOn: develArchiveArtifact) {
    }

    // Publications
    publishing {
        repositories {
            maven {
                name 'libs-release'
                url = witbeBuilder.artifactoryContextUrl + 'libs-release-local'
                credentials(witbeBuilder.artifactoryCredentials)
            }
            maven {
                name 'yum-release'
                url = witbeBuilder.artifactoryContextUrl + 'yum-release-local'
                credentials(witbeBuilder.artifactoryCredentials)
            }
        }
        publications {
            witbeProject(MavenPublication) {
                artifact develArchiveArtifact
                ext.repoName = 'libs-release'
                ext.dependencyConfiguration = 'natives'
            }
            witbeRPMS(MavenPublication) {
                groupId "7.os.x86_64"
                artifact(file("${buildDir}/remoti-${project.version}-${project.architecture}-libs.rpm")) { extension 'rpm'; classifier 'libs' }
                artifact(file("${buildDir}/remoti-${project.version}-${project.architecture}-devel.rpm")) { extension 'rpm'; classifier 'devel' }
                artifact(file("${buildDir}/remoti-${project.version}-${project.architecture}-server.rpm")) { extension 'rpm'; classifier 'server' }
                ext.repoName = 'yum-release'
            }
        }
    }

    // Artifactory Plugin Configuration (custom artifactory DSL)
    def extRepository = { repoKey = "ext-release-local" } << witbeBuilder.artifactoryRepository
    artifactory {
        contextUrl = "${artifactory_contextUrl}"
        resolve { repository(witbeBuilder.artifactoryRepository) }
        publish {
            repository(extRepository)
            defaults { publications ('witbeProject', 'witbeRPMS'); publishArtifacts = false; }
        }
    }
